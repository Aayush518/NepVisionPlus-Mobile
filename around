import React, { useState, useRef, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  Pressable,
  Image,
  Animated,
  ScrollView,
  SafeAreaView,
  Dimensions,
  Alert,
  StatusBar,
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { Video, ResizeMode } from 'expo-av';
import { FontAwesome5 } from '@expo/vector-icons';
import * as FileSystem from 'expo-file-system';
import * as Speech from 'expo-speech';

const { width: SCREEN_WIDTH } = Dimensions.get('window');
const CARD_MARGIN = 16;
const CARD_WIDTH = SCREEN_WIDTH - (CARD_MARGIN * 2);

const MOCK_SUMMARY = "यो एक नमूना नेपाली सारांश हो। यहाँ भिडियोको मुख्य विवरण देखाइएको छ।";

const TextToSpeechApp = () => {
  // States
  const [videoUri, setVideoUri] = useState(null);
  const [frames, setFrames] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [result, setResult] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Animation values
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const scaleAnim = useRef(new Animated.Value(0.9)).current;

  // Refs
  const videoRef = useRef(null);
  const scrollViewRef = useRef(null);

  useEffect(() => {
    StatusBar.setBarStyle('light-content');
    animateIn();
  }, []);

  const animateIn = () => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 600,
        useNativeDriver: true,
      }),
      Animated.spring(slideAnim, {
        toValue: 0,
        tension: 30,
        friction: 8,
        useNativeDriver: true,
      }),
      Animated.spring(scaleAnim, {
        toValue: 1,
        tension: 50,
        friction: 7,
        useNativeDriver: true,
      }),
    ]).start();
  };

/*************  ✨ Codeium Command ⭐  *************/
/**
 * Launches the image library for video selection.
 * Sets the loading state while the video is being picked.
 * Allows editing and restricts video duration to 5 seconds.
 * If a video is selected, updates the video URI state and initiates video processing.
 * Handles errors by logging them and displaying an alert.
 */
/******  54219ecd-d54f-4405-9cc7-db7f2f06b187  *******/
  const pickVideo = async () => {
    setIsLoading(true);
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Videos,
        allowsEditing: true,
        quality: 1,
        videoMaxDuration: 5,
      });

      if (!result.canceled) {
        const selectedVideo = result.assets[0];
        setVideoUri(selectedVideo.uri);
        processVideo(selectedVideo.uri);
      }
    } catch (error) {
      console.error('Error picking video:', error);
      Alert.alert('Error', 'Failed to pick video. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const processVideo = async (uri) => {
    if (!uri) return;

    setIsProcessing(true);
    try {
      // Simulate processing
      for (let progress = 0; progress <= 100; progress += 10) {
        setUploadProgress(progress);
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // Mock frames
      const mockFrames = Array(5).fill(null).map((_, index) => ({
        id: index,
        uri: uri,
        timestamp: index + 1
      }));

      setFrames(mockFrames);
      setResult({ summary: MOCK_SUMMARY });
    } catch (error) {
      console.error('Error processing video:', error);
      Alert.alert('Error', 'Failed to process video. Please try again.');
    } finally {
      setIsProcessing(false);
      setUploadProgress(0);
    }
  };

  const handlePlayPause = async () => {
    try {
      const isSpeaking = await Speech.isSpeakingAsync();
      
      if (isSpeaking) {
        await Speech.stop();
        setIsPlaying(false);
      } else {
        setIsPlaying(true);
        await Speech.speak(MOCK_SUMMARY, {
          language: 'ne-NP',
          rate: 0.9,
          pitch: 1.0,
          onDone: () => setIsPlaying(false),
          onError: () => {
            setIsPlaying(false);
            Alert.alert('Error', 'Failed to play audio. Please try again.');
          }
        });
      }
    } catch (error) {
      setIsPlaying(false);
      Alert.alert('Error', 'Failed to play audio. Please try again.');
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      
      <ScrollView
        ref={scrollViewRef}
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        {/* Header */}
        <Animated.View
          style={[
            styles.headerContainer,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Text style={styles.headerTitle}>Video Processing</Text>
          <Text style={styles.headerSubtitle}>Upload a video to get started</Text>
        </Animated.View>

        {/* Upload Button */}
        <Animated.View
          style={[
            styles.uploadSection,
            {
              opacity: fadeAnim,
              transform: [{ scale: scaleAnim }],
            },
          ]}
        >
          <Pressable
            style={({ pressed }) => [
              styles.uploadButton,
              pressed && styles.uploadButtonPressed,
            ]}
            onPress={pickVideo}
            disabled={isLoading || isProcessing}
          >
            <View style={styles.uploadButtonContent}>
              <FontAwesome5
                name={isLoading ? "spinner" : "cloud-upload-alt"}
                size={24}
                color="#F8FAFC"
              />
              <Text style={styles.uploadButtonText}>
                {isLoading ? "Loading..." : "Upload Video"}
              </Text>
            </View>
          </Pressable>
        </Animated.View>

        {/* Video Preview */}
        {videoUri && (
          <Animated.View style={[styles.videoContainer, { opacity: fadeAnim }]}>
            <Video
              ref={videoRef}
              style={styles.video}
              source={{ uri: videoUri }}
              useNativeControls
              resizeMode={ResizeMode.CONTAIN}
              isLooping={false}
            />
          </Animated.View>
        )}

        {/* Processing Status */}
        {isProcessing && (
          <View style={styles.processingContainer}>
            <FontAwesome5 name="spinner" size={24} color="#6366F1" />
            <Text style={styles.processingText}>Processing your video...</Text>
            <View style={styles.progressContainer}>
              <View 
                style={[
                  styles.progressBar,
                  { width: `${uploadProgress}%` },
                ]}
              />
            </View>
          </View>
        )}

        {/* Frames Section */}
        {frames.length > 0 && (
          <View style={styles.framesSection}>
            <Text style={styles.sectionTitle}>Extracted Frames</Text>
            <ScrollView
              horizontal
              showsHorizontalScrollIndicator={false}
              style={styles.framesScrollView}
            >
              {frames.map((frame) => (
                <View key={frame.id} style={styles.frameCard}>
                  <Image
                    source={{ uri: frame.uri }}
                    style={styles.frameImage}
                    resizeMode="cover"
                  />
                  <View style={styles.frameOverlay}>
                    <Text style={styles.frameTimestamp}>{`${frame.timestamp}s`}</Text>
                  </View>
                </View>
              ))}
            </ScrollView>
          </View>
        )}

        {/* Results Section */}
        {result && (
          <View style={styles.resultsSection}>
            <Text style={styles.sectionTitle}>Results</Text>
            
            <View style={styles.summaryCard}>
              <Text style={styles.summaryTitle}>Summary</Text>
              <Text style={styles.summaryText}>{result.summary}</Text>
            </View>

            <View style={styles.audioPlayerCard}>
              <Pressable
                style={styles.audioPlayButton}
                onPress={handlePlayPause}
              >
                <FontAwesome5
                  name={isPlaying ? "pause-circle" : "play-circle"}
                  size={48}
                  color="#6366F1"
                  solid
                />
                <Text style={styles.audioPlayText}>
                  {isPlaying ? "Stop Speaking" : "Speak Summary"}
                </Text>
              </Pressable>
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F172A',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 40,
  },
  headerContainer: {
    padding: 20,
    marginBottom: 20,
    backgroundColor: '#1E293B',
    borderRadius: 16,
    margin: 20,
  },
  headerTitle: {
    fontSize: 32,
    fontWeight: '800',
    color: '#F8FAFC',
    marginBottom: 8,
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#94A3B8',
    textAlign: 'center',
  },
  uploadSection: {
    padding: 20,
  },
  uploadButton: {
    backgroundColor: '#6366F1',
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 8,
    shadowColor: '#6366F1',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  uploadButtonContent: {
    padding: 20,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  uploadButtonPressed: {
    opacity: 0.9,
    transform: [{ scale: 0.98 }],
  },
  uploadButtonText: {
    color: '#F8FAFC',
    fontSize: 18,
    fontWeight: '600',
    marginLeft: 12,
  },
  videoContainer: {
    width: CARD_WIDTH,
    height: 240,
    marginHorizontal: CARD_MARGIN,
    marginBottom: 20,
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: '#1E293B',
    elevation: 8,
  },
  video: {
    flex: 1,
  },
  processingContainer: {
    padding: 20,
    alignItems: 'center',
    backgroundColor: '#1E293B',
    margin: 20,
    borderRadius: 16,
  },
  processingText: {
    color: '#94A3B8',
    fontSize: 16,
    marginTop: 12,
  },
  progressContainer: {
    width: '100%',
    height: 4,
    backgroundColor: '#334155',
    borderRadius: 2,
    marginTop: 16,
    overflow: 'hidden',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#6366F1',
    borderRadius: 2,
  },
  framesSection: {
    marginVertical: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#F8FAFC',
    marginHorizontal: 20,
    marginBottom: 16,
  },
  framesScrollView: {
    paddingHorizontal: 16,
  },
  frameCard: {
    width: 160,
    height: 160,
    marginHorizontal: 4,
    borderRadius: 12,
    overflow: 'hidden',
    backgroundColor: '#1E293B',
  },
  frameImage: {
    width: '100%',
    height: '100%',
  },
  frameOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 8,
    backgroundColor: 'rgba(30, 41, 59, 0.8)',
  },
  frameTimestamp: {
    color: '#F8FAFC',
    fontSize: 14,
    textAlign: 'center',
  },
  resultsSection: {
    marginVertical: 20,
  },
  summaryCard: {
    backgroundColor: '#1E293B',
    borderRadius: 16,
    padding: 20,
    marginHorizontal: 20,
    marginBottom: 16,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#E2E8F0',
    marginBottom: 12,
  },
  summaryText: {
    fontSize: 16,
    color: '#94A3B8',
    lineHeight: 24,
  },
  audioPlayerCard: {
    backgroundColor: '#1E293B',
    borderRadius: 16,
    padding: 20,
    marginHorizontal: 20,
    alignItems: 'center',
  },
  audioPlayButton: {
    alignItems: 'center',
  },
  audioPlayText: {
    color: '#94A3B8',
    fontSize: 14,
    marginTop: 8,
  },
});

export default TextToSpeechApp;